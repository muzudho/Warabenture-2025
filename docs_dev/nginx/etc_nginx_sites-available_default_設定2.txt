##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        #listen 80 default_server;
        listen 80;
        #listen [::]:80 default_server;
        listen [::]:80;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        #server_name _;
        server_name www.warabenture.com;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}

        #Append:
        return 301 https://$server_name$request_uri;
}


server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name www.warabenture.com;

    # SSL証明書（Let’s Encryptなど、さくらのVPSで設定済み前提）
    ssl_certificate /etc/letsencrypt/live/www.warabenture.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.warabenture.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Nuxtの静的ファイルルート（pnpm generateのdist）
    root /home/ubuntu/warabenture-2025/public;

    index index.html;

    # /data/ の静的ファイル配信
    location /data/ {
        try_files $uri $uri/ =404;
        add_header Cache-Control "public, max-age=3600";  # キャッシュ1時間
        add_header Access-Control-Allow-Origin "*";  # CORS許可
        types { application/json json; }  # JSONのMIMEタイプ
    }

    # Nuxtの静的コンテンツ
    location / {
        try_files $uri $uri/ /index.html;  # SPA用フォールバック
    }

    # ログ設定（デバッグ用）
    access_log /var/log/nginx/warabenture-access.log;
    error_log /var/log/nginx/warabenture-error.log;
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}
